trigger:
  branches:
    include:
      - master

jobs:
  - job: "Build"

    pool:
      vmImage: "ubuntu-latest"

    variables:
      GOBIN: "$(GOPATH)/bin" # Go binaries path
      GOROOT: "/usr/local/go1.14" # Go installation path
      GOPATH: "$(system.defaultWorkingDirectory)/gopath" # Go workspace path
      modulePath: "$(GOPATH)/src/github.com/$(build.repository.name)" # Path to the module's code

    steps:
      - task: GoTool@0
        inputs:
          version: "1.14"

      - script: |
          mkdir -p '$(GOBIN)'
          mkdir -p '$(GOPATH)/pkg'
          mkdir -p '$(modulePath)'
          shopt -s extglob
          shopt -s dotglob
          mv !(gopath) '$(modulePath)'
          echo '##vso[task.prependpath]$(GOBIN)'
          echo '##vso[task.prependpath]$(GOROOT)/bin'
        displayName: "Set up the Go workspace"

      - script: |
          go get github.com/securego/gosec/cmd/gosec
          gosec -quiet ./...
        workingDirectory: "$(modulePath)"
        env:
          GO111MODULE: on
        displayName: "Application Security Testing"

      - script: |
          go get -v honnef.co/go/tools/cmd/staticcheck
          staticcheck -checks "inherit,-ST1005" -f stylish ./...
        workingDirectory: "$(modulePath)"
        env:
          GO111MODULE: on
        displayName: "Static Analysis"

      - script: |
          make test
          make coverage
        workingDirectory: "$(modulePath)"
        env:
          GO111MODULE: on
        displayName: "Test"

      - task: PublishTestResults@2
        inputs:
          testRunner: JUnit
          testResultsFiles: $(System.DefaultWorkingDirectory)/**/report.xml

      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: Cobertura
          pathToSources: "$(System.DefaultWorkingDirectory)"
          summaryFileLocation: $(System.DefaultWorkingDirectory)/**/coverage.xml
          reportDirectory: $(System.DefaultWorkingDirectory)/**/coverage
          failIfCoverageEmpty: true
